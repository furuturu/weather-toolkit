{"version":3,"sources":["screens/Weather/Search/Search.styles.js","store/Forecast/actions.js","store/Forecast/slice.js","store/Forecast/selectors.js","screens/Weather/Search/Search.jsx","screens/Weather/ForecastDashboard/ForecastDashboard.styles.js","utils/averageTemperature.js","utils/getIcon.js","screens/Weather/SelectedDay/SelectedDay.styles.js","screens/Weather/Chart/Chart.js","screens/Weather/SelectedDay/SelectedDay.jsx","utils/unixToDate.js","screens/Weather/ForecastDashboard/ForecastDashboard.jsx","utils/unixToDay.js","components/Error/Error.styles.js","components/Error/Error.jsx","components/Loader/Loader.styles.js","components/Loader/Loader.jsx","screens/Weather/LocationMap/LocationMap.jsx","screens/Weather/Main/Main.jsx","App.js","services/weatherService.js","store/Forecast/saga.js","store/root.saga.js","store/root.reducer.js","index.js","store/index.js"],"names":["SearchWrapper","styled","form","TextField","input","SearchButton","button","FETCH_CURRENT","FETCH_CURRENT_MAP","requestCurrentForecast","createAction","startLocationSaga","forecastSlice","createSlice","name","initialState","city","country","coord","lat","lon","Forecast","isLoading","error","reducers","showLoader","state","action","payload","saveForecastToState","showError","saveCity","actions","selectCoord","forecast","selectCity","selectLoad","selectError","selectForecastData","Search","useState","value","setValue","dispatch","useDispatch","localStorage","getItem","useSelector","onSubmit","event","preventDefault","trim","placeholder","onChange","target","type","ForecastWrapper","div","DayContainer","props","selected","index","averageTemp","temp","Math","round","reduce","min","max","getIcon","code","Wrapper","Temperature","Location","h4","Icon","Description","Border","ChartWrapper","Chart","data","hourly","LineChart","width","height","Line","dataKey","stroke","CartesianGrid","Legend","verticalAlign","XAxis","YAxis","SelectedDay","unix","daily","changeView","setChangeView","onClick","dt","Date","toLocaleString","year","month","day","weekday","className","src","weather","icon","alt","description","feels_like","humidity","wind_speed","ForecastDashboard","slice","selectedDay","setSelectedDay","map","selectDayHandler","Alert","Error","rotate","keyframes","RoundLoader","LoaderWrapper","Loader","LocationMap","center","setCenter","console","log","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","coordArray","useMemo","useEffect","latLng","coordinates","defaultZoom","anchor","Main","loading","App","APIKEY","process","fetchWeatherByCity","axios","get","fetchWeatherByCoord","fetchWeatherByLocation","forecastWorker","forecastWatcher","locationWorker","locationWatcher","put","call","currentDataFromApi","sys","setItem","weekForecastDataFromApi","takeLatest","ForecastDataFromApi","rootSaga","all","rootReducer","combineReducers","reducer","store","sagaMiddleware","createSagaMiddleware","middlewareEnhancer","applyMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","run","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50fe4589.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const SearchWrapper = styled.form`\n  display: flex;\n  align-items: baseline;\n  justify-content: center;\n  margin: 5px;\n`;\nexport const TextField = styled.input`\n  font-family: inherit;\n  width: 500px;\n  border: 0;\n  border-bottom: 2px solid #0a4500;\n  outline: 0;\n  font-size: 1.3rem;\n  padding: 7px 0;\n  background: transparent;\n`;\n\nexport const SearchButton = styled.button`\n  position: relative;\n  display: block;\n  width: 200px;\n  height: 36px;\n  border-radius: 18px;\n  background-color: black;\n  border: solid 1px transparent;\n  color: #fff;\n  font-size: 18px;\n  font-weight: 300;\n  cursor: pointer;\n  transition: all 0.1s ease-in-out;\n  &:hover {\n    background-color: darkslategrey;\n    border-color: #fff;\n    transition: 0.3s ease-in-out;\n  }\n`;\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const FETCH_CURRENT = \"FETCH_CURRENT\";\nexport const FETCH_CURRENT_MAP = \"FETCH_CURRENT_MAP\";\nexport const requestCurrentForecast = createAction(FETCH_CURRENT);\nexport const startLocationSaga = createAction(FETCH_CURRENT_MAP);\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialForecast = {\n  city: { name: null, country: null, coord: { lat: 55.75322, lon: 37.622513 } },\n  Forecast: null,\n  isLoading: false,\n  error: false,\n};\nexport const forecastSlice = createSlice({\n  name: \"weather\",\n  initialState: initialForecast,\n  reducers: {\n    showLoader(state, action) {\n      state.isLoading = action.payload;\n    },\n    saveForecastToState(state, action) {\n      state.isLoading = false;\n      state.error = false;\n      state.Forecast = action.payload;\n    },\n    showError(state, action) {\n      state.error = action.payload;\n    },\n    saveCity(state, action) {\n      state.city = action.payload;\n    },\n  },\n});\n\nexport const { showLoader, showError, saveForecastToState, saveCity } =\n  forecastSlice.actions;\n","export const selectCoord = (state) => state.forecast.city?.coord;\nexport const selectCity = (state) => state.forecast.city;\nexport const selectLoad = (state) => state.forecast.isLoading;\nexport const selectError = (state) => state.forecast.error;\nexport const selectForecastData = (state) => state.forecast.Forecast;\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SearchButton, SearchWrapper, TextField } from \"./Search.styles\";\nimport { requestCurrentForecast } from \"../../../store/Forecast/actions\";\nimport { showLoader } from \"../../../store/Forecast/slice\";\nimport { selectCity } from \"../../../store/Forecast/selectors\";\n\nexport const Search = () => {\n  const [value, setValue] = useState(\"\");\n  const dispatch = useDispatch();\n  const city = localStorage.getItem(\"city\");\n  const cityFromRedux = useSelector(selectCity).name;\n  if (!cityFromRedux && city) {\n    dispatch(requestCurrentForecast(city));\n  }\n  const handleOnChange = (event) => {\n    setValue(event.target.value);\n  };\n  const handleOnSubmit = (event) => {\n    event.preventDefault();\n    if (value.trim()) {\n      dispatch(showLoader(true));\n      dispatch(requestCurrentForecast(value));\n      setValue(\"\");\n    }\n  };\n  return (\n    <SearchWrapper onSubmit={handleOnSubmit}>\n      <TextField\n        placeholder={\"Enter your location\"}\n        onChange={handleOnChange}\n        value={value}\n      />\n      <SearchButton type=\"submit\">Search</SearchButton>\n    </SearchWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const ForecastWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\nexport const DayContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  margin: 30px;\n  cursor: pointer;\n  background-color: ${(props) =>\n    props.selected === props.index ? \"rgb(220,220,220)\" : \"rgb(245,245,245)\"};\n  &:hover {\n    background-color: rgba(220, 220, 220, 0.65);\n  }\n`;\n","export const averageTemp = (temp) => {\n  return Math.round(temp.reduce((min, max) => min + max) / 2);\n};\n","export const getIcon = (code) => {\n  return `https://openweathermap.org/img/wn/${code}@2x.png`;\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  align-items: center;\n  cursor: pointer;\n  .content {\n    display: flex;\n  }\n`;\nexport const Temperature = styled.div`\n  font-size: 120px;\n  line-height: 0.7;\n  margin: 0;\n`;\nexport const Location = styled.h4`\n  margin: 20px 0 20px 0;\n  font-size: fontSize(14px);\n  font-weight: 400;\n  text-transform: uppercase;\n  text-align: center;\n`;\nexport const Icon = styled.div`\n  display: flex;\n  align-content: center;\n  height: 100px;\n  width: 100px;\n`;\nexport const Description = styled.div`\n  font-size: fontSize(13px);\n  text-align: center;\n`;\n\nexport const Border = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  align-items: center;\n  min-width: 100%;\n  margin: 15px;\n  border: 3px solid darkslategrey;\n`;\nexport const ChartWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  cursor: pointer;\n`;\n\n","import { LineChart, Line, XAxis, YAxis, CartesianGrid, Legend } from \"recharts\";\nimport { useSelector } from \"react-redux\";\nimport { selectForecastData } from \"../../../store/Forecast/selectors\";\n\nexport const Chart = () => {\n  const data = useSelector(selectForecastData)?.hourly;\n  return (\n    <LineChart width={600} height={300} data={data}>\n      <Line\n        type=\"monotone\"\n        name=\"Temperature for the next 48 hours\"\n        dataKey=\"temp\"\n        stroke=\"#004220\"\n      />\n      <CartesianGrid stroke=\"#ccc\" />\n      <Legend verticalAlign=\"top\" height={36} />\n      <XAxis />\n      <YAxis dataKey=\"temp\" type=\"number\" />\n    </LineChart>\n  );\n};\n","import {\n  Description,\n  Temperature,\n  Wrapper,\n  Location,\n  Icon,\n  Border,\n  ChartWrapper,\n} from \"./SelectedDay.styles\";\nimport {\n  selectCity,\n  selectForecastData,\n} from \"../../../store/Forecast/selectors\";\nimport { useSelector } from \"react-redux\";\nimport { averageTemp, getIcon, unixToDate } from \"../../../utils\";\nimport { useState } from \"react\";\nimport { Chart } from \"../Chart\";\n\nexport const SelectedDay = ({ index }) => {\n  const data = useSelector(selectForecastData)?.daily;\n  const city = useSelector(selectCity);\n  const [changeView, setChangeView] = useState(true);\n  return (\n    <div>\n      {changeView ? (\n        <Wrapper onClick={() => setChangeView(false)}>\n          <Location>\n            {city.name}, {city.country} <br />\n            Forecast for the {unixToDate(data[index].dt)}\n          </Location>\n          <div className=\"content\">\n            <Temperature>\n              {averageTemp([data[index].temp.max, data[index].temp.min])}°\n            </Temperature>\n            <Icon>\n              <img\n                src={getIcon(data[index].weather[0].icon)}\n                alt={data[index].weather[0].description}\n              />\n            </Icon>\n          </div>\n          <Description>\n            <b>Feels like {Math.round(data[index].feels_like.day)}</b>\n            <br />\n            {data[index].weather[0].description}, humidity:{\" \"}\n            {data[index].humidity}%, wind speed:{\" \"}\n            {Math.round(data[index].wind_speed)}m/s\n          </Description>\n        </Wrapper>\n      ) : (\n        <ChartWrapper onClick={() => setChangeView(true)}>\n          <Chart />\n        </ChartWrapper>\n      )}\n      <Border />\n    </div>\n  );\n};\n","export const unixToDate = (unix) => {\n  return new Date(unix * 1000).toLocaleString(\"en-GB\", {\n    year: \"numeric\",\n    month: \"numeric\",\n    day: \"numeric\",\n    weekday: \"long\",\n  });\n};\n","import { DayContainer, ForecastWrapper } from \"./ForecastDashboard.styles\";\nimport { useSelector } from \"react-redux\";\nimport { selectForecastData } from \"../../../store/Forecast/selectors\";\nimport { getIcon, unixToDay, averageTemp } from \"../../../utils\";\nimport { useState } from \"react\";\nimport { SelectedDay } from \"../SelectedDay\";\nexport const ForecastDashboard = () => {\n  const forecast = useSelector(selectForecastData)?.daily.slice(0, 5);\n  const [selectedDay, setSelectedDay] = useState(0);\n  const selectDayHandler = (index) => {\n    setSelectedDay(index);\n  };\n  return (\n    <>\n      <SelectedDay index={selectedDay} />\n      <ForecastWrapper>\n        {forecast &&\n          forecast.map((day, index) => (\n            <DayContainer\n              selected={selectedDay}\n              index={index}\n              key={day.dt}\n              onClick={() => selectDayHandler(index)}\n            >\n              <div>{unixToDay(day.dt)}</div>\n              <img src={getIcon(day.weather[0].icon)} alt={\"\"} />\n              <div>{averageTemp([day.temp.max, day.temp.min])}°</div>\n            </DayContainer>\n          ))}\n      </ForecastWrapper>\n    </>\n  );\n};\n//разделяю массив объектов daily из апишки, где каждый объект - данные на день. в хуке индексы этих объектов в массиве,\n//по умолчанию 0 (сегодня). при клике на день, хук меняется на индекс массива, индекс передается в SelectedDay и там\n//выводятся данные из массива daily по переданному индексу + меняется фон дня по переданным в контейнер пропсам\n","export const unixToDay = (unix) => {\n  return new Date(unix * 1000).toLocaleString(\"en-US\", { weekday: \"long\" });\n};\n","import styled from \"styled-components\";\r\nexport const Alert = styled.div`\r\n  text-align: center;\r\n  margin: 5px;\r\n  background-color: rgba(255,8,12,0.65);\r\n  font-size: xx-large;`\r\n","import { Alert } from \"./Error.styles\";\n\nexport const Error = () => {\n  return <Alert>The location you provided is invalid</Alert>;\n};\n","import styled, { keyframes } from \"styled-components\";\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nexport const RoundLoader = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n  position: relative;\n  width: 8rem;\n  height: 8rem;\n  border-radius: 50%;\n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 50%;\n    border: 10px solid transparent;\n    border-left-color: black;\n    border-top-color: black;\n    animation: ${rotate} 1s infinite ease-in-out;\n  }\n`;\nexport const LoaderWrapper = styled.div`\n  display: grid;\n  place-items: center;\n  height: 375px;\n`;\n","import { LoaderWrapper, RoundLoader } from \"./Loader.styles\";\n\nexport const Loader = () => {\n  return (\n    <LoaderWrapper>\n      <RoundLoader />\n    </LoaderWrapper>\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { Map, Marker } from \"pigeon-maps\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { startLocationSaga } from \"../../../store/Forecast/actions\";\nimport { selectCoord } from \"../../../store/Forecast/selectors\";\nimport { showLoader } from \"../../../store/Forecast/slice\";\n\nexport const LocationMap = () => {\n  const [center, setCenter] = useState(null);\n  const dispatch = useDispatch();\n  const city = localStorage.getItem(\"city\");\n  console.log();\n  if (center === null && !city) {\n    const geoSuccess = (position) => {\n      dispatch(showLoader(true));\n      dispatch(\n        startLocationSaga({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        })\n      );\n    };\n    navigator.geolocation.getCurrentPosition(geoSuccess);\n  }\n  //в карту из стейта\n  const coord = useSelector(selectCoord);\n  const coordArray = useMemo(() => [coord.lat, coord.lon], [coord]);\n  useEffect(() => {\n    setCenter(coordArray);\n  }, [coordArray]);\n  //с карты в стейт\n  const onClickHandler = (event) => {\n    setCenter(event.latLng);\n    const coordinates = {\n      lat: event.latLng[0],\n      lon: event.latLng[1],\n    };\n    dispatch(showLoader(true));\n    dispatch(startLocationSaga(coordinates));\n  };\n\n  return (\n    <Map height={300} onClick={onClickHandler} defaultZoom={11} center={center}>\n      <Marker width={50} anchor={center} />\n    </Map>\n  );\n};\n","import React from \"react\";\nimport { Search } from \"../Search\";\nimport {\n  selectError,\n  selectForecastData,\n} from \"../../../store/Forecast/selectors\";\nimport { ForecastDashboard } from \"../ForecastDashboard\";\nimport { Loader } from \"../../../components\";\nimport { LocationMap } from \"../LocationMap\";\nimport { selectLoad } from \"../../../store/Forecast/selectors\";\nimport { useSelector } from \"react-redux\";\nimport { Error } from \"../../../components\";\n\nexport const Main = () => {\n  const forecast = useSelector(selectForecastData);\n  const error = useSelector(selectError);\n  const loading = useSelector(selectLoad);\n\n  return (\n    <>\n      <Search />\n      {loading && <Loader />}\n      {error && <Error />}\n      {!error && !loading && forecast && (\n        <>\n          <ForecastDashboard />\n        </>\n      )}\n      <LocationMap />\n    </>\n  );\n};\n","import { Main } from \"./screens/Weather/Main\";\n\nexport const App = () => {\n  return <Main />;\n};\n","import axios from \"axios\";\nconst APIKEY = process.env.REACT_APP_API_KEY; //7301e1685d8a38abdf7aaec9131a3033\nexport const fetchWeatherByCity = (city) => {\n  return axios.get(\n    `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${APIKEY}&units=metric`\n  );\n};\nexport const fetchWeatherByCoord = ({ lat, lon }) => {\n  return axios.get(\n    `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,alerts&appid=${APIKEY}&units=metric`\n  );\n};\nexport const fetchWeatherByLocation = ({ lat, lon }) => {\n  return axios.get(\n    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${APIKEY}&units=metric`\n  );\n};\n","import { takeLatest, put, call } from \"redux-saga/effects\";\nimport { saveCity, saveForecastToState, showError, showLoader } from \"./slice\";\nimport {\n  fetchWeatherByCity,\n  fetchWeatherByCoord,\n  fetchWeatherByLocation,\n} from \"../../services\";\nimport { FETCH_CURRENT, FETCH_CURRENT_MAP } from \"./actions\";\n\nfunction* forecastWorker(action) {\n  try {\n    yield put(showError(false));\n    const currentDataFromApi = yield call(fetchWeatherByCity, action.payload);\n    console.log(currentDataFromApi);\n    yield put(\n      saveCity({\n        name: currentDataFromApi.data.name,\n        country: currentDataFromApi.data.sys.country,\n        coord: currentDataFromApi.data.coord,\n      })\n    );\n    localStorage.setItem(\"city\", currentDataFromApi.data.name);\n    const weekForecastDataFromApi = yield call(\n      fetchWeatherByCoord,\n      currentDataFromApi.data.coord\n    );\n    console.log(weekForecastDataFromApi.data);\n    yield put(saveForecastToState(weekForecastDataFromApi.data));\n  } catch (e) {\n    yield put(showError(true));\n    console.log(\"все сломалось нахуй\");\n  } finally {\n    yield put(showLoader(false));\n  }\n}\nexport function* forecastWatcher() {\n  yield takeLatest(FETCH_CURRENT, forecastWorker);\n}\n//то же самое, только первый запрос на основе координат\nexport function* locationWorker(action) {\n  try {\n    yield put(showError(false));\n    const currentDataFromApi = yield call(\n      fetchWeatherByLocation,\n      action.payload\n    );\n    console.log(currentDataFromApi.data);\n    yield put(\n      saveCity({\n        name: currentDataFromApi.data.name,\n        country: currentDataFromApi.data.sys.country,\n        coord: currentDataFromApi.data.coord,\n      })\n    );\n    localStorage.setItem(\"city\", currentDataFromApi.data.name);\n    const ForecastDataFromApi = yield call(\n      fetchWeatherByCoord,\n      currentDataFromApi.data.coord\n    );\n    console.log(ForecastDataFromApi.data);\n    yield put(saveForecastToState(ForecastDataFromApi.data));\n  } catch (e) {\n    yield put(showError(true));\n    console.log(\"все сломалось нахуй\");\n  } finally {\n    yield put(showLoader(false));\n  }\n}\nexport function* locationWatcher() {\n  yield takeLatest(FETCH_CURRENT_MAP, locationWorker);\n}\n","import { forecastWatcher, locationWatcher } from \"./Forecast/saga\";\nimport { all } from \"redux-saga/effects\";\n\nexport function* rootSaga() {\n  yield all([forecastWatcher(), locationWatcher()]);\n}\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport { forecastSlice } from \"./Forecast/slice\";\n\nexport const rootReducer = combineReducers({\n  forecast: forecastSlice.reducer,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./store\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { createStore, applyMiddleware, compose } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootSaga } from \"./root.saga\";\nimport { rootReducer } from \"./root.reducer\";\n\nexport const configureStore = (initialState) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewareEnhancer = applyMiddleware(sagaMiddleware);\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(middlewareEnhancer)\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n"],"sourceRoot":""}